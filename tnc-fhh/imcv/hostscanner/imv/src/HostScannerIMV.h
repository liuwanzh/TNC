/* 
 * Copyright (C) 2006-2011 Fachhochschule Hannover
 * (University of Applied Sciences and Arts, Hannover)
 * Faculty IV, Dept. of Computer Science
 * Ricklinger Stadtweg 118, 30459 Hannover, Germany
 * 
 * Email: trust@f4-i.fh-hannover.de
 * Website: http://trust.inform.fh-hannover.de/
 * 
 * This file is part of tnc@fhh, an open source 
 * Trusted Network Connect implementation by the Trust@FHH
 * research group at the Fachhochschule Hannover.
 * 
 * tnc@fhh is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * tnc@fhh is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with tnc@fhh; if not, see <http://www.gnu.org/licenses/>
 */
 
#ifndef _HOSTSCANNERIMV_H_
#define _HOSTSCANNERIMV_H_

#include <imunit/imv/AbstractIMV.h>
#include "HostScannerIMVLibrary.h"
#include <string>
#include <vector>
#include <map>

#include <hostscannerimvConfig.h> // generated by cmake

/**
 * Header file for IMV HostScanner. This IMV checks the scan for open ports
 * done by the corresponding IMC on the client.
 *
 * <h3>Changelog:</h3>
 * <ul>
 *   <li>06.05.2008 - create class (Daniel Wuttke)</li>
 *   <li>11.02.2008 - redesign (ib)</li>
 *   <li>09.05.2008 - redesign (mbs)</li>
 *   <li>19.06.2009 - redesign 0.6.0 (ib)</li>
 *   <li>30.07.2009 - update to 0.6.0 (mbs)</li>
 * </ul>
 *
 * @class HostScannerIMV
 * @brief This IMV ckecks a clients' open ports.
 * @date 06.05.2008
 * @author Daniel Wuttke
 * @author Ingo Bente (ib)
 */
class HostScannerIMV : public tncfhh::iml::AbstractIMV
{
    private:
    	/**
    	 * Layer 4 Protocol
    	 */
    	enum Protocol {TCP, UDP};

    	/**
    	 * Status of the port
    	 */
    	enum Status {open, close, whatever};

    	/**
    	 * Triple of protocol, port and status
    	 */
    	class Policy
    	{
    		public:
    			Protocol protocol;
    			unsigned short port;
    			Status status;

    			Policy(Protocol pr, unsigned short po, Status s);
    	};

    	std::vector<Policy> policys;

    	unsigned int count;

        /**
         * Reads one line from file ans writes it into the buffer
         * including '\0' and excluding '\n'.
         *
         * @param in Stream of the file from which shall be read.
         * @param buf Buffer where the read line is saved.
         * @param size Size of the buffer.
         */
    	bool readLine(std::istream &in, char *buf, const int size);

        /**
         * Trims the string according to the specified delimiters.
         *
         * @param source The string that shall be trimmed.
         * @param delims Delimiters specified as separate char's.
         * @return The greatest substring from source that does not contain any character
         *         specified as delimiter.
         */
    	std::string trim(std::string const& source, char const* delims = " \t\r\n");

        /**
         * Reads all properties from the file.
         *
         * @param in Stream of the file from which shall be read.
         * @return A vector of key value pairs.
         */
    	std::vector<std::pair<std::string,std::string> > readAllProperties(std::istream &in);

    public:
    	/**
		 * Ctor
		 */
	    HostScannerIMV(TNC_ConnectionID conID, HostScannerIMVLibrary *pHostScannerIMVLibrary);

	    /**
		 * Dtor
		 */
	    virtual ~HostScannerIMV();

	    /**
	     * receiveMessage
	     */
        virtual TNC_Result receiveMessage(TNC_BufferReference message,
        			                      TNC_UInt32 messageLength,
        			                      TNC_MessageType messageType);

        /**
         * notifyConnectionChange
         */
        virtual TNC_Result notifyConnectionChange();

        /**
         * batchEnding
         */
    	virtual TNC_Result batchEnding();

    	/**
    	 * Sets status of IMV when an IF-M protocol error occurs
    	 */
    	virtual TNC_Result clientError(std::string s);
};

#endif //_HOSTSCANNERIMV_H_
